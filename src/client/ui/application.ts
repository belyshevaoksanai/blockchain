import { html, TemplateResult } from '../../../node_modules/lit-html/lit-html.js';
import { Message, MessageTypes } from '../../shared/messages.js';
import { Block, BlockchainNode, Transaction } from '../lib/blockchain-node.js';
import { WebsocketController } from '../lib/websocket-controller.js';
import { BlocksPanel } from './blocks-panel.js';
import { Callback, Renderable } from './common.js';
import { PendingTransactionsPanel } from './pending-transactions-panel.js';
import { TransactionForm } from './transaction-form.js';

export class Application implements Renderable<void> {
  private readonly node: BlockchainNode;
  private readonly server: WebsocketController; // –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å WS

  // UI components:
  // –ü–µ—Ä–µ–¥–∞–µ—Ç callback –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É, —á—Ç–æ–±—ã —Ç–µ –º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
  private readonly transactionForm = new TransactionForm(this.requestRendering);
  private readonly pendingTransactionsPanel = new PendingTransactionsPanel(this.requestRendering);
  private readonly blocksPanel = new BlocksPanel(this.requestRendering);

  constructor(readonly requestRendering: Callback) {
    // –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WS —Å–µ—Ä–≤–µ—Ä—É
    this.server = new WebsocketController(this.handleServerMessages);
    // –ª–æ–≥–∏–∫–∞ —Å –±–ª–æ–∫—á–µ–π–Ω-—É–∑–ª–∞–º–∏
    this.node = new BlockchainNode();

    // –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.requestRendering();
    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω
    this.initializeBlockchain();
  }

  private async initializeBlockchain() {
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–ª–∏–Ω–Ω–µ–π—à—É—é —Ü–µ–ø–æ—á–∫—É
    const blocks = await this.server.requestLongestChain();
    if (blocks.length > 0) {
      this.node.initializeWith(blocks);
    } else {
      await this.node.initializeWithGenesisBlock();
    }

    this.requestRendering();
  }

  render(): TemplateResult {
    return html`
      <main>
        <h1>Blockchain node</h1>
        <aside>${this.statusLine}</aside>
        <section>${this.transactionForm.render(this.node)}</section>
        <section>
          <form @submit="${this.generateBlock}">
            ${this.pendingTransactionsPanel.render(this.node)}
          </form>
        </section>
        <section>${this.blocksPanel.render(this.node.chain)}</section>
      </main>
    `;
  }

  private get statusLine(): TemplateResult {
    return html`
      <p>${
        this.node.chainIsEmpty          ? '‚è≥ Initializing the blockchain...' :
        this.node.isMining              ? '‚è≥ Mining a new block...' :
        this.node.noPendingTransactions ? 'üì© Add one or more transactions.' :
                                          '‚úÖ Ready to mine a new block.'
      }</p>
    `;
  }

  private readonly generateBlock = async (event: Event): Promise<void> => {
    event.preventDefault();

    // —Å–æ–æ–±—â–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–∑–ª–∞–º —á—Ç–æ –Ω–∞—á–∞–ª –∏—Å–∫–∞—Ç—å –±–ª–æ–∫
    this.server.requestNewBlock(this.node.pendingTransactions);
    // –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±—ã–≤–∞—Ç—å –±–ª–æ–∫
    const miningProcessIsDone = this.node.mineBlockWith(this.node.pendingTransactions);

    this.requestRendering();

    const newBlock = await miningProcessIsDone;
    // –¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
    this.addBlock(newBlock);
  };

  private async addBlock(block: Block, notifyOthers = true): Promise<void> {
    try {
      await this.node.addBlock(block);
      if (notifyOthers) {
        // –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫-–ø—Ä–µ—Ç–µ–¥–µ–Ω—Ç
        this.server.announceNewBlock(block);
      }
    } catch (error) {
      console.log(error.message);
    }

    this.requestRendering();
  }

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WS
  private readonly handleServerMessages = (message: Message) => {
    switch (message.type) {
      case MessageTypes.GetLongestChainRequest: return this.handleGetLongestChainRequest(message);
      case MessageTypes.NewBlockRequest       : return this.handleNewBlockRequest(message);
      case MessageTypes.NewBlockAnnouncement  : return this.handleNewBlockAnnouncement(message);
      default: {
        console.log(`Received message of unknown type: "${message.type}"`);
      }
    }
  }

  // —É–∑–µ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ—é –¥–ª–∏–Ω–Ω–µ–π—à—É—é —Ü–µ–ø–æ—á–∫—É —Å–µ—Ä–≤–µ—Ä—É
  private handleGetLongestChainRequest(message: Message): void {
    this.server.send({
      type: MessageTypes.GetLongestChainResponse,
      correlationId: message.correlationId,
      payload: this.node.chain
    });
  }

  private async handleNewBlockRequest(message: Message): Promise<void> {
    const transactions = message.payload as Transaction[];
    const newBlock = await this.node.mineBlockWith(transactions);
    this.addBlock(newBlock);
  }

  private async handleNewBlockAnnouncement(message: Message): Promise<void> {
    const newBlock = message.payload as Block;
    this.addBlock(newBlock, false);
  }
}